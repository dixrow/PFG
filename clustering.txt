import pandas as pd
import numpy as np
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
import matplotlib.pyplot as plt
from sklearn.metrics import silhouette_score


# Separar las variables predictoras (X) de la variable respuesta (y)
X = df.drop('Status', axis=1)  
y = df['Status']  

# Codificar variables categóricas 
X_encoded = pd.get_dummies(X)  

# Escalar los datos
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X_encoded)


# Aplicar clustering
kmeans = KMeans(n_clusters=2, random_state=42)  
kmeans.fit(X_scaled)
cluster_labels = kmeans.labels_


# Visualizar los clusters
pca = PCA(n_components=2)
X_pca = pca.fit_transform(X_scaled)
plt.scatter(X_pca[:, 0], X_pca[:, 1], c=cluster_labels, cmap='viridis')
plt.xlabel('Componente Principal 1')
plt.ylabel('Componente Principal 2')
plt.title('Visualización de Clusters')
plt.colorbar()
plt.show()


# Análisis de clusters
print("Media de la variable Status para cada cluster")
cluster_analysis = pd.DataFrame({'Cluster': cluster_labels, 'Status': y})
cluster_summary = cluster_analysis.groupby('Cluster')['Status'].mean()
print(cluster_summary)

